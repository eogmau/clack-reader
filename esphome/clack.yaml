substitutions:
  name: clack
  device_description: "Esphome component for Clack WS1 softener with ultrasonic sensor saltlevel detection"
  timezone: "Europe/Amsterdam"  

# In order to use other language or different ESP chip, fix include file name below:
# Currently supported languages are en, nl. 
# ESP32 is a mh-et-live or wemos d32 mini, esp8266 is a wemos d1 mini, esp32s3 is a lilygo ESP32S3-T7
#
packages:
  remote_package:
    url: https://github.com/fonske/clack-reader
    ref: main
    files: 
      - esphome/.clack-labels-en.yaml
      # - esphome/.clack-labels-nl.yaml
      # - esphome/board-esp32.yaml
      # - esphome/board-esp32s3.yaml
      - esphome/board-esp8266.yaml

esphome:
  name: ${name}
  includes:
    - distance-sensor2.h

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  services:
    - service: meterstand_clack
      variables:
        meter_value: float
      then:
        - globals.set:
            id: clack_totalWaterUsage
            value: !lambda "return ( meter_value ) ;"

time:
  - platform: sntp
    id: clack_sntp_time
    timezone: ${timezone}
    on_time_sync:
      then:
        - logger.log: "Synchronized sntp clock"

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} hotspot"
    password: "configesp"
    ap_timeout: 15s

globals:
  - id: clack_totalWaterUsage
    type: float
# ⬇ Bij het updaten onder de waarde, verander dit in no voor 1 run  ⬇ # 
    restore_value: yes     
# ⬇ Bij het flashen,pas dit aan! ⬇ #        
    initial_value: '00' 

#-----------
#SENSORS
#-----------
sensor:
  # ultrasonic distance sensor.
  - platform: custom
    lambda: |-
      auto height_sensor = new DistanceSensor(150, id(uart_bus));
      App.register_component(height_sensor);
      return {height_sensor};
    sensors:
      name: ${clack_distance}
      id:  clack_distance
      unit_of_measurement: "cm"
      accuracy_decimals: 1
      icon: "mdi:arrow-expand-vertical" 
      filters:
      - throttle: 5s
      - filter_out: nan
      - delta: 0.5
      on_value:
        then:
          - sensor.template.publish:
              id: clack_procent
              state: !lambda |-
                const float max_distance = id(clack_saltlevel_height_max).state; // heigt in cm to lowest level
                const float min_distance = id(clack_saltlevel_height_min).state; // height in cm to highest level
                return int((1-((id(clack_distance).state - min_distance)/max_distance))*100);
  #              return id(procent).state;
          - sensor.template.publish:
              id: clack_height
              state: !lambda |-
                const float max_distance = id(clack_saltlevel_height_max).state;  // height in cm to lowest level
                return max_distance-id(clack_distance).state;
#                return id(hoogte).state;   
          - text_sensor.template.publish:
              id: clack_fill_salt
              state: !lambda |-
                if (id(clack_height).state < id(clack_saltlevel_height_fill).state) {
                  return {"${clack_yes}"};
                } else {
                  return {"${clack_no}"};
                }
    
      
  # ultrasonic distance sensor calculate tank_percentage
  - platform: template
    id: clack_procent
    name: ${clack_procent}
    #    update_interval: 5s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:percent-box-outline" 
    update_interval: 600s
    filters:
    - lambda: |-
        if (x >= 100) return 100.0;
        else if (x <= 0.0) return 0.0;
        else return x;
    
  # ultrasonic distance sensor calculate salt level from bottom
  - platform: template
    id: clack_height
    name: ${clack_height}
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    icon: "mdi:hydraulic-oil-level" 
    update_interval: 600s
    filters:
    - lambda: |-
        if (x >= 100) return 100.0;
        else if (x <= 0.0) return 0.0;
        else return x;


#####################################################################
# CLACK
#####################################################################

#  Watermeter  
  - platform: template
    id: clack_watermeter_total
    name: ${clack_watermeter_total}
    state_class: "total_increasing"
    icon: mdi:water
    update_interval: 600s
    unit_of_measurement: "ltr"
    accuracy_decimals: 0
    lambda: |-
      return id(clack_totalWaterUsage);

  - platform: template  
    id: clack_m3_left
    name: ${clack_m3_left}
    unit_of_measurement: 'm3'
    accuracy_decimals: 2
    update_interval: 600s

  - platform: template
    id: clack_l_left
    name: ${clack_l_left}
    unit_of_measurement: 'l'
    accuracy_decimals: 0
    update_interval: 600s

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    id: clack_wifi_signal_db
    name: "WiFi Signal dB"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    id: clack_wifi_signal_db_percent
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    id: clack_version
    name: ${clack_version}
    hide_timestamp: true

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${clack_ip} IP
      
  # Expose last regeneration information as sensor
  - platform: template
    name: ${clack_regeneration_last}
    id: clack_regeneration_last
    icon: mdi:clock-start
    update_interval: 600s
    filters:
      - substitute:
        - "Jan -> ${jan}"
        - "Feb -> ${feb}"
        - "Mar -> ${mar}"
        - "Apr -> ${apr}"
        - "Mai -> ${mai}"
        - "Jun -> ${jun}"
        - "Jul -> ${jul}"
        - "Aug -> ${aug}"
        - "Sep -> ${sep}"
        - "Okt -> ${okt}"
        - "Nov -> ${nov}"
        - "Dec -> ${dec}"
        - "Mon -> ${mon}"
        - "Tue -> ${tue}"
        - "Wed -> ${wed}"
        - "Thu -> ${thu}"
        - "Fri -> ${fri}"
        - "Sat -> ${sat}"
        - "Sun -> ${sun}"

# Textsensor "Zout bijvullen" ja of nee tussen 8 en 23 uur
  - platform: template
    name: ${clack_fill_salt}
    id: clack_fill_salt
    icon: mdi:basket-fill
    update_interval: 600s

# imput numbers as boxes for setting the dimensions of the tank and level alarm.
number:
    ## Set minimum distance (from bottom sensor / underneath plastic cap)
  - platform: template
    id: clack_saltlevel_height_min
    name: ${clack_saltlevel_height_min}
    icon: mdi:toggle-switch-variant
    optimistic: true
    mode: slider
    step: 0.5
    entity_category: config
    min_value: 0
    max_value: 10
    initial_value: 0
    restore_value: yes
    unit_of_measurement: "cm"
    on_value:
      then:
        - sensor.template.publish:
            id: clack_procent
            state: !lambda |-
              const float max_distance = id(clack_saltlevel_height_max).state; // heigt in cm to lowest level
              const float min_distance = id(clack_saltlevel_height_min).state; // height in cm to highest level
              return int((1-((id(clack_distance).state - min_distance)/max_distance))*100);
        - sensor.template.publish:
            id: clack_height
            state: !lambda |-
              const float max_distance = id(clack_saltlevel_height_max).state;  // height in cm to lowest level
              return max_distance-id(clack_distance).state; 

    ## Set maximum distance (from bottom sensor / underneath plastic cap) to water level (to measure in pipe?)
  - platform: template
    id: clack_saltlevel_height_max
    name: ${clack_saltlevel_height_max}
    icon: mdi:toggle-switch-variant-off
    optimistic: true
    mode: slider
    step: 0.5
    entity_category: config
    min_value: 0
    max_value: 100
    initial_value: 30
    restore_value: yes
    unit_of_measurement: "cm"
    on_value:
      then:
        - sensor.template.publish:
            id: clack_procent
            state: !lambda |-
              const float max_distance = id(clack_saltlevel_height_max).state; // heigt in cm to lowest level
              const float min_distance = id(clack_saltlevel_height_min).state; // height in cm to highest level
              return int((1-((id(clack_distance).state - min_distance)/max_distance))*100);
        - sensor.template.publish:
            id: clack_height
            state: !lambda |-
              const float max_distance = id(clack_saltlevel_height_max).state;  // height in cm to lowest level
              return max_distance-id(clack_distance).state;

    ## Set alarm level
  - platform: template
    id: clack_saltlevel_height_fill
    name: ${clack_saltlevel_height_fill}
    icon: mdi:hydraulic-oil-temperature
    optimistic: true
    mode: slider
    step: 0.1
    entity_category: config
    min_value: 0
    max_value: 10
    initial_value: 1.5
    restore_value: yes
    unit_of_measurement: ""
    update_interval: 600s
    on_value:
      then:
        - text_sensor.template.publish:
            id: clack_fill_salt
            state: !lambda |-
              if (id(clack_height).state < id(clack_saltlevel_height_fill).state) {
                return {"${clack_yes}"};
              } else {
                return {"${clack_no}"};
              }

    ## Set capacity liters
  - platform: template
    id: clack_capacity_liters
    name: ${clack_capacity_liters}
    icon: mdi:water-opacity
    optimistic: true
    mode: slider
    step: 50
    entity_category: config
    min_value: 0
    max_value: 7200
    initial_value: 3200
    restore_value: yes
    unit_of_measurement: ""
  
    ## Set capacity days  
  - platform: template
    id: clack_capacity_days
    name: ${clack_capacity_days}
    icon: mdi:calendar-clock
    optimistic: true
    mode: slider
    step: 1
    entity_category: config
    min_value: 0
    max_value: 21
    initial_value: 10
    restore_value: yes
    unit_of_measurement: ""